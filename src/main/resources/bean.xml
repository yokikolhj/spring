<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- ————————————————————————————————————————————————1.把对象的创建交给spring来管理———————————————————————————————————————————————— -->
    <!-- <bean id="userService" class="com.shirly.service.impl.UserServiceImpl"></bean>

    <bean id="userDao" class="com.shirly.dao.impl.UserDaoImpl"></bean> -->
    
    <!-- ————————————————————————————————————————————————2.把对象的创建交给spring来管理———————————————————————————————————————————————— -->
    <!--spring对bean的管理细节
        1.创建bean的三种方式
        2.bean对象的作用范围
        3.bean对象的生命周期
    -->

    <!--创建Bean的三种方式 -->
    <!-- 第一种方式：使用默认构造函数创建。
            在spring的配置文件中使用bean标签，配以id和class属性之后，且没有其他属性和标签时。
            采用的就是默认构造函数创建bean对象，此时如果类中没有默认构造函数，则对象无法创建。

    <bean id="userService" class="com.shirly.service.impl.UserServiceImpl"></bean>
    -->

    <!-- 第二种方式： 使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）
    <bean id="instanceFactory" class="com.shirly.factory.InstanceFactory"></bean>
    <bean id="userService" factory-bean="instanceFactory" factory-method="getUserService"></bean>
    -->

    <!-- 第三种方式：使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器)
    <bean id="userService" class="com.shirly.factory.StaticFactory" factory-method="getUserService"></bean>
    -->

    <!-- bean的作用范围调整
        bean标签的scope属性：
            作用：用于指定bean的作用范围
            取值： 常用的就是单例的和多例的
                singleton：单例的（默认值）
                prototype：多例的
                request：作用于web应用的请求范围
                session：作用于web应用的会话范围
                global-session：作用于集群环境的会话范围（全局会话范围），当不是集群环境时，它就是session

    <bean id="userService" class="com.shirly.service.impl.UserServiceImpl" scope="prototype"></bean>
    -->

    <!-- bean对象的生命周期
            单例对象
                出生：当容器创建时对象出生
                活着：只要容器还在，对象一直活着
                死亡：容器销毁，对象消亡
                总结：单例对象的生命周期和容器相同
            多例对象
                出生：当我们使用对象时spring框架为我们创建
                活着：对象只要是在使用过程中就一直活着。
                死亡：当对象长时间不用，且没有别的对象引用时，由Java的垃圾回收器回收
     -->
    <!-- <bean id="userService" class="com.shirly.service.impl.UserServiceImpl"
          scope="prototype" init-method="init" destroy-method="destroy"></bean> -->
    
    <!-- ————————————————————————————————————————————————3.把对象的创建交给spring来管理———————————————————————————————————————————————— -->
    <!-- spring中的依赖注入
        依赖注入：
            Dependency Injection
        IOC的作用：
            降低程序间的耦合（依赖关系）
        依赖关系的管理：
            以后都交给spring来维护
        在当前类需要用到其他类的对象，由spring为我们提供，我们只需要在配置文件中说明
        依赖关系的维护：
            就称之为依赖注入。
         依赖注入：
            能注入的数据：有三类
                基本类型和String
                其他bean类型（在配置文件中或者注解配置过的bean）
                复杂类型/集合类型
             注入的方式：有三种
                第一种：使用构造函数提供
                第二种：使用set方法提供
                第三种：使用注解提供（明天的内容）
     -->


    <!--构造函数注入：
        使用的标签:constructor-arg
        标签出现的位置：bean标签的内部
        标签中的属性
            type：用于指定要注入的数据的数据类型，该数据类型也是构造函数中某个或某些参数的类型
            index：用于指定要注入的数据给构造函数中指定索引位置的参数赋值。索引的位置是从0开始
            name：用于指定给构造函数中指定名称的参数赋值                                        常用的
            =============以上三个用于指定给构造函数中哪个参数赋值===============================
            value：用于提供基本类型和String类型的数据
            ref：用于指定其他的bean类型数据。它指的就是在spring的Ioc核心容器中出现过的bean对象

        优势：
            在获取bean对象时，注入数据是必须的操作，否则对象无法创建成功。
        弊端：
            改变了bean对象的实例化方式，使我们在创建对象时，如果用不到这些数据，也必须提供。
    -->
    <!-- <bean id="userService" class="com.shirly.service.impl.UserServiceImpl">
        <constructor-arg name="name" value="泰斯特"></constructor-arg>
        <constructor-arg name="age" value="18"></constructor-arg>
        <constructor-arg name="birthday" ref="now"></constructor-arg>
    </bean> -->

    <!-- 配置一个日期对象 -->
    <!-- <bean id="now" class="java.util.Date"></bean> -->



    <!-- set方法注入                更常用的方式
        涉及的标签：property
        出现的位置：bean标签的内部
        标签的属性
            name：用于指定注入时所调用的set方法名称
            value：用于提供基本类型和String类型的数据
            ref：用于指定其他的bean类型数据。它指的就是在spring的Ioc核心容器中出现过的bean对象
        优势：
            创建对象时没有明确的限制，可以直接使用默认构造函数
        弊端：
            如果有某个成员必须有值，则获取对象是有可能set方法没有执行。
    -->
    <!-- <bean id="userService2" class="com.shirly.service.impl.UserServiceImpl2">
        <property name="name" value="TEST" ></property>
        <property name="age" value="21"></property>
        <property name="birthday" ref="now"></property>
    </bean> -->


    <!-- 复杂类型的注入/集合类型的注入
        用于给List结构集合注入的标签：
            list array set
        用于个Map结构集合注入的标签:
            map  props
        结构相同，标签可以互换
    -->
    <!-- <bean id="userService3" class="com.shirly.service.impl.UserServiceImpl3">
        <property name="myStrs">
            <set>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </set>
        </property>

        <property name="myList">
            <array>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </array>
        </property>

        <property name="mySet">
            <list>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </list>
        </property>

        <property name="myMap">
            <props>
                <prop key="testC">ccc</prop>
                <prop key="testD">ddd</prop>
            </props>
        </property>

        <property name="myProps">
            <map>
                <entry key="testA" value="aaa"></entry>
                <entry key="testB">
                    <value>BBB</value>
                </entry>
            </map>
        </property>
    </bean> -->
    
    <!-- ————————————————————————————————————————————————4.把对象的创建交给spring来管理———————————————————————————————————————————————— -->
    <!--注解方式：告知spring在创建容器时要扫描的包，配置所需要的标签不是在beans的约束中，而是一个名称为context名称空间和约束中-->
	<!-- <context:component-scan base-package="com.shirly"></context:component-scan> -->
    
    <!-- ————————————————————————————————————————————————5.把对象的创建交给spring来管理———————————————————————————————————————————————— -->
    <!-- 配置Service,set方法注入其他bean -->
    <!-- <bean id="orderService" class="com.shirly.service.impl.OrderServiceImpl">
        注入dao
        <property name="orderDao" ref="orderDao"></property>
    </bean> -->

    <!--配置Dao对象,set方法注入其他bean -->
    <!-- <bean id="orderDao" class="com.shirly.dao.impl.OrderDaoImpl">
        注入QueryRunner
        <property name="runner" ref="runner"></property>
    </bean> -->

    <!--配置QueryRunner-->
    <!-- <bean id="runner" class="org.apache.commons.dbutils.QueryRunner" scope="prototype">
        注入数据源
        <constructor-arg name="ds" ref="dataSource"></constructor-arg>
    </bean> -->

    <!-- 配置数据源 -->
    <!-- <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        连接数据库的必备信息
        <property name="driverClass" value="com.mysql.cj.jdbc.Driver"></property>
        <property name="jdbcUrl" value="jdbc:mysql://127.0.0.1:3306/qfrestaurant?serverTimezone=UTC"></property>
        <property name="user" value="root"></property>
        <property name="password" value="123456"></property>
    </bean> -->
    
    <!-- ————————————————————————————————————————————————6.把对象的创建交给spring来管理———————————————————————————————————————————————— -->
    <!-- 告知spring在创建容器时要扫描的包 -->
    <!-- <context:component-scan base-package="com.shirly"></context:component-scan> -->
    <!--配置QueryRunner-->
    <!-- <bean id="runner" class="org.apache.commons.dbutils.QueryRunner" scope="prototype">
        注入数据源
        <constructor-arg name="ds" ref="dataSource"></constructor-arg>
    </bean> -->

    <!-- 配置数据源 -->
    <!-- <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        连接数据库的必备信息
        <property name="driverClass" value="com.mysql.cj.jdbc.Driver"></property>
        <property name="jdbcUrl" value="jdbc:mysql://127.0.0.1:3306/qfrestaurant?serverTimezone=UTC"></property>
        <property name="user" value="root"></property>
        <property name="password" value="123456"></property>
    </bean> -->
    
    <!-- ————————————————————————————————————————————————7.把对象的创建交给spring来管理———————————————————————————————————————————————— -->
    <!--配置代理的service-->
    <!-- <bean id="proxyOrderService" factory-bean="beanFactory" factory-method="getOrderService"></bean> -->

    <!--配置beanfactory-->
    <!-- <bean id="beanFactory" class="com.shirly.factory.ProxyFactory">
        注入service
        <property name="orderService" ref="orderService"></property>
        注入事务管理器
        <property name="txManager" ref="txManager"></property>
    </bean> -->

     <!-- 配置Service -->
    <!-- <bean id="orderService" class="com.shirly.service.impl.OrderServiceImpl">
        注入dao
        <property name="orderDao" ref="orderDao"></property>
        注入事务管理器 直接在service里面添加事务时需要
        <property name="txManager" ref="txManager"></property>
    </bean> -->

    <!--配置Dao对象-->
    <!-- <bean id="orderDao" class="com.shirly.dao.impl.OrderDaoImpl">
        注入QueryRunner
        <property name="runner" ref="runner"></property>
        注入ConnectionUtils
        <property name="connectionUtils" ref="connectionUtils"></property>
    </bean> -->

    <!--配置QueryRunner-->
    <!-- <bean id="runner" class="org.apache.commons.dbutils.QueryRunner" scope="prototype"></bean> -->

    <!-- 配置数据源 -->
    <!-- <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        连接数据库的必备信息
        <property name="driverClass" value="com.mysql.cj.jdbc.Driver"></property>
        <property name="jdbcUrl" value="jdbc:mysql://127.0.0.1:3306/qfrestaurant?serverTimezone=UTC"></property>
        <property name="user" value="root"></property>
        <property name="password" value="123456"></property>
    </bean> -->

    <!-- 配置Connection的工具类 ConnectionUtils -->
    <!-- <bean id="connectionUtils" class="com.shirly.util.ConnectionUtils">
        注入数据源
        <property name="dataSource" ref="dataSource"></property>
    </bean> -->

    <!-- 配置事务管理器-->
    <!-- <bean id="txManager" class="com.shirly.util.TransactionManager">
        注入ConnectionUtils
        <property name="connectionUtils" ref="connectionUtils"></property>
    </bean> -->
    
    <!-- ————————————————————————————————————————————————8.把对象的创建交给spring来管理———————————————————————————————————————————————— -->
    <!-- 配置srping的Ioc,把service对象配置进来-->
    <!-- <bean id="userService" class="com.shirly.service.impl.UserServiceImpl"></bean> -->

    <!--spring中基于XML的AOP配置步骤
        1、把通知Bean也交给spring来管理
        2、使用aop:config标签表明开始AOP的配置
        3、使用aop:aspect标签表明配置切面
                id属性：是给切面提供一个唯一标识
                ref属性：是指定通知类bean的Id。
        4、在aop:aspect标签的内部使用对应标签来配置通知的类型
               我们现在示例是让printLog方法在切入点方法执行之前之前：所以是前置通知
               aop:before：表示配置前置通知
                    method属性：用于指定Logger类中哪个方法是前置通知
                    pointcut属性：用于指定切入点表达式，该表达式的含义指的是对业务层中哪些方法增强

            切入点表达式的写法：
                关键字：execution(表达式)
                表达式：
                    访问修饰符  返回值  包名.包名.包名...类名.方法名(参数列表)
                标准的表达式写法：
                    public void com.shirly.service.impl.UserServiceImpl.saveUser()
                访问修饰符可以省略
                    void com.shirly.service.impl.UserServiceImpl.saveUser()
                返回值可以使用通配符，表示任意返回值
                    * com.shirly.service.impl.UserServiceImpl.saveUser()
                包名可以使用通配符，表示任意包。但是有几级包，就需要写几个*.
                    * *.*.*.*.UserServiceImpl.saveUser()
                包名可以使用..表示当前包及其子包
                    * *..UserServiceImpl.saveUser()
                类名和方法名都可以使用*来实现通配
                    * *..*.*()
                参数列表：
                    可以直接写数据类型：
                        基本类型直接写名称           int
                        引用类型写包名.类名的方式   java.lang.String
                    可以使用通配符表示任意类型，但是必须有参数
                    可以使用..表示有无参数均可，有参数可以是任意类型
                全通配写法：
                    * *..*.*(..)

                实际开发中切入点表达式的通常写法：
                    切到业务层实现类下的所有方法
                        * com.shirly.service.impl.*.*(..)
    -->

    <!-- 配置Logger类 -->
    <!-- <bean id="logger" class="com.shirly.util.Logger"></bean>

    配置AOP
    <aop:config>
	    配置切入点表达式 id属性用于指定表达式的唯一标识。expression属性用于指定表达式内容
	              此标签写在aop:aspect标签内部只能当前切面使用。
	              它还可以写在aop:aspect外面，此时就变成了所有切面可用
         
        <aop:pointcut id="pt1" expression="execution(* com.shirly.service.impl.*.*(..))"></aop:pointcut>
        配置切面
        <aop:aspect id="logAdvice" ref="logger">
            配置通知的类型，并且建立通知方法和切入点方法的关联
            <aop:before method="printLog" pointcut="execution(* com.shirly.service.impl.*.*(..))"></aop:before>
            配置前置通知：在切入点方法执行之前执行
            <aop:before method="beforePrintLog" pointcut-ref="pt1" ></aop:before>

            配置后置通知：在切入点方法正常执行之后值。它和异常通知永远只能执行一个
            <aop:after-returning method="afterReturningPrintLog" pointcut-ref="pt1"></aop:after-returning>

            配置异常通知：在切入点方法执行产生异常之后执行。它和后置通知永远只能执行一个
            <aop:after-throwing method="afterThrowingPrintLog" pointcut-ref="pt1"></aop:after-throwing>

            配置最终通知：无论切入点方法是否正常执行它都会在其后面执行
            <aop:after method="afterPrintLog" pointcut-ref="pt1"></aop:after>

            配置环绕通知 详细的注释请看Logger类中
            <aop:around method="aroundPringLog" pointcut-ref="pt1"></aop:around>
        </aop:aspect>
    </aop:config> -->
    
    <!-- ————————————————————————————————————————————————9.把对象的创建交给spring来管理———————————————————————————————————————————————— -->
    <!-- 配置spring创建容器时要扫描的包-->
    <!-- <context:component-scan base-package="com.shirly"></context:component-scan>

    配置spring开启注解AOP的支持
    <aop:aspectj-autoproxy></aop:aspectj-autoproxy> -->
    
    <!-- ————————————————————————————————————————————————10.把对象的创建交给spring来管理———————————————————————————————————————————————— -->
    <!-- <bean id="orderDao" class="com.shirly.dao.impl.OrderDaoImpl">
        <property name="jdbcTemplate" ref="jdbcTemplate"></property>
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    配置JdbcTemplate
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    配置数据源
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"></property>
        <property name="url" value="jdbc:mysql://127.0.0.1:3306/qfrestaurant?serverTimezone=UTC"></property>
        <property name="username" value="root"></property>
        <property name="password" value="123456"></property>
    </bean> -->
    
    <!-- ————————————————————————————————————————————————11.把对象的创建交给spring来管理———————————————————————————————————————————————— -->
    <!-- 配置Service -->
    <!-- <bean id="orderService" class="com.shirly.service.impl.OrderServiceImpl">
        注入dao
        <property name="orderDao" ref="orderDao"></property>
    </bean>

    配置Dao对象
    <bean id="orderDao" class="com.shirly.dao.impl.OrderDaoImpl">
        注入QueryRunner
        <property name="runner" ref="runner"></property>
        注入ConnectionUtils
        <property name="connectionUtils" ref="connectionUtils"></property>
    </bean>

    配置QueryRunner
    <bean id="runner" class="org.apache.commons.dbutils.QueryRunner" scope="prototype"></bean>

    配置数据源
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        连接数据库的必备信息
        <property name="driverClass" value="com.mysql.cj.jdbc.Driver"></property>
        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/qfrestaurant?serverTimezone=UTC"></property>
        <property name="user" value="root"></property>
        <property name="password" value="123456"></property>
    </bean>

    配置Connection的工具类 ConnectionUtils
    <bean id="connectionUtils" class="com.shirly.util.ConnectionUtils">
        注入数据源
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    配置事务管理器
    <bean id="txManager" class="com.shirly.util.TransactionManager">
        注入ConnectionUtils
        <property name="connectionUtils" ref="connectionUtils"></property>
    </bean>

    配置aop
    <aop:config>
        配置通用切入点表达式
        <aop:pointcut id="pt1" expression="execution(* com.shirly.service.impl.*.*(..))"></aop:pointcut>
        <aop:aspect id="txAdvice" ref="txManager">
            配置前置通知：开启事务
            <aop:before method="beginTransaction" pointcut-ref="pt1"></aop:before>
            配置后置通知：提交事务
            <aop:after-returning method="commit" pointcut-ref="pt1"></aop:after-returning>
            配置异常通知：回滚事务
            <aop:after-throwing method="rollback" pointcut-ref="pt1"></aop:after-throwing>
            配置最终通知：释放连接
            <aop:after method="release" pointcut-ref="pt1"></aop:after>
        </aop:aspect>
    </aop:config> -->
    
    <!-- ————————————————————————————————————————————————12.把对象的创建交给spring来管理———————————————————————————————————————————————— -->
    <!--配置spring创建容器时要扫描的包-->
    <!-- <context:component-scan base-package="com.shirly"></context:component-scan>
    
    配置QueryRunner
    <bean id="runner" class="org.apache.commons.dbutils.QueryRunner" scope="prototype"></bean>

    配置数据源
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        连接数据库的必备信息
        <property name="driverClass" value="com.mysql.cj.jdbc.Driver"></property>
        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/qfrestaurant?serverTimezone=UTC"></property>
        <property name="user" value="root"></property>
        <property name="password" value="123456"></property>
    </bean>
   	开启spring对注解AOP的支持
    <aop:aspectj-autoproxy></aop:aspectj-autoproxy> -->
    
    <!-- ————————————————————————————————————————————————13.把对象的创建交给spring来管理———————————————————————————————————————————————— -->
    <!-- 配置业务层-->
    <!-- <bean id="orderService" class="com.shirly.service.impl.OrderServiceImpl">
        <property name="orderDao" ref="orderDao"></property>
    </bean>

    配置账户的持久层
    <bean id="orderDao" class="com.shirly.dao.impl.OrderDaoImpl2">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    配置数据源
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"></property>
        <property name="url" value="jdbc:mysql://127.0.0.1:3306/qfrestaurant?serverTimezone=UTC"></property>
        <property name="username" value="root"></property>
        <property name="password" value="123456"></property>
    </bean> -->

    <!-- spring中基于XML的声明式事务控制配置步骤
        1、配置事务管理器
        2、配置事务的通知
                此时我们需要导入事务的约束 tx名称空间和约束，同时也需要aop的
                使用tx:advice标签配置事务通知
                    属性：
                        id：给事务通知起一个唯一标识
                        transaction-manager：给事务通知提供一个事务管理器引用
        3、配置AOP中的通用切入点表达式
        4、建立事务通知和切入点表达式的对应关系
        5、配置事务的属性
               是在事务的通知tx:advice标签的内部

     -->
    <!-- 配置事务管理器 -->
    <!-- <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    配置事务的通知
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        配置事务的属性
                isolation：用于指定事务的隔离级别。默认值是DEFAULT，表示使用数据库的默认隔离级别。
                propagation：用于指定事务的传播行为。默认值是REQUIRED，表示一定会有事务，增删改的选择。查询方法可以选择SUPPORTS。
                read-only：用于指定事务是否只读。只有查询方法才能设置为true。默认值是false，表示读写。
                timeout：用于指定事务的超时时间，默认值是-1，表示永不超时。如果指定了数值，以秒为单位。
                rollback-for：用于指定一个异常，当产生该异常时，事务回滚，产生其他异常时，事务不回滚。没有默认值。表示任何异常都回滚。
                no-rollback-for：用于指定一个异常，当产生该异常时，事务不回滚，产生其他异常时事务回滚。没有默认值。表示任何异常都回滚。
       
        <tx:attributes>
            <tx:method name="*" propagation="REQUIRED" read-only="false"/>
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"></tx:method>
        </tx:attributes>
    </tx:advice>

    配置aop
    <aop:config>
        配置切入点表达式
        <aop:pointcut id="pt1" expression="execution(* com.shirly.service.impl.*.*(..))"></aop:pointcut>
        建立切入点表达式和事务通知的对应关系
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pt1"></aop:advisor>
    </aop:config> -->
    
    <!-- ————————————————————————————————————————————————14.把对象的创建交给spring来管理———————————————————————————————————————————————— -->
    <!-- 配置spring创建容器时要扫描的包-->
    <!-- <context:component-scan base-package="com.shirly"></context:component-scan>

    配置JdbcTemplate
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    配置数据源
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"></property>
        <property name="url" value="jdbc:mysql://127.0.0.1:3306/qfrestaurant?serverTimezone=UTC"></property>
        <property name="username" value="root"></property>
        <property name="password" value="123456"></property>
    </bean>
    spring中基于注解 的声明式事务控制配置步骤
        1、配置事务管理器
        2、开启spring对注解事务的支持
        3、在需要事务支持的地方使用@Transactional注解
    
    配置事务管理器
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    开启spring对注解事务的支持
    <tx:annotation-driven transaction-manager="transactionManager"></tx:annotation-driven> -->
    
    <!-- ————————————————————————————————————————————————15.把对象的创建交给spring来管理———————————————————————————————————————————————— -->
    <!-- 配置业务层-->
    <bean id="orderService" class="com.shirly.service.impl.OrderServiceImpl">
        <property name="orderDao" ref="orderDao"></property>
        <property name="transactionTemplate" ref="transactionTemplate"></property>
    </bean>

   	<!--  配置账户的持久层 -->
    <bean id="orderDao" class="com.shirly.dao.impl.OrderDaoImpl2">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!-- 配置数据源 -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"></property>
        <property name="url" value="jdbc:mysql://127.0.0.1:3306/qfrestaurant?serverTimezone=UTC"></property>
        <property name="username" value="root"></property>
        <property name="password" value="123456"></property>
    </bean>
    <!-- 配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!--配置事务模板对象-->
    <bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
        <property name="transactionManager" ref="transactionManager"></property>
    </bean>
    
    
</beans>